`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
//
//Students: Brett Bushnell (Undergrad), Matt Dzurick (Grad)
<<<<<<< HEAD
//Date Created: Thu Dec  1 11:51:24 2016
=======
//Date Created: Thu Dec  1 10:10:36 2016
>>>>>>> 98ab0e89dbc19e6fc1214e3fd30b976ca9cb4993
//Assignment: 3
//File: test.v
//Description: An HLSM module which represents the C-like behavioral description 
//             into a scheduled high-level statement machine implemented in Verilog.
//
//////////////////////////////////////////////////////////////////////////////////

module HLSM(Clk, Rst, Start, Done a, b, c, z, x);
	input Clk, Rst, Start;
	output reg Done;
	input [15:0] a, b, c;

	output [7:0] z;
	output [15:0] x;

	wire [7:0] d, e, f, g;

	reg[:0] State, NextState;
	parameter Wait = 0, s2 = 1, s3 = 2, s4 = 3, s5 = 4, s6 = 5, s7 = 6,Final = 7;

	always@(a, b, c, Start ,State) begin
		case(State)
			Wait: begin
				if (Start)
					NextState <= s2;
				else
					NextState <= Wait;
			end
			s2: begin
				NextState <= TODO
			end
<<<<<<< HEAD
			s3: begin
				NextState <= TODO
			end
			s4: begin
				NextState <= TODO
			end
			s5: begin
				NextState <= TODO
			end
			s6: begin
=======
			s9: begin
				NextState <= TODO
			end
			s10: begin
				NextState <= TODO
			end
			s11: begin
				NextState <= TODO
			end
			s12: begin
>>>>>>> 98ab0e89dbc19e6fc1214e3fd30b976ca9cb4993
				NextState <= TODO
			end
			Final: begin
				Done <= 1;
				NextState <= Wait;
			end
		endcase
	end

	always@(posedge Clk) begin
		if (Rst)
			State <= Wait;
		else
			State <= NextState;
	end

endmodule
